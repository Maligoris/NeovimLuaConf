:h x              - справка по конкретной команде, где x имя команды
K                 - посмотреть man-страницу слова под курсором

                       РАЗНОЕ
:ab mas Maslow'shierarchy of needs - для раскрытия аббревиатуры, mas автоматом когда вы наберете <space>.
!sort             - Сортировка текста (Выделить текст и нажать !sort)
:args *.py        - открыть все файлы с расширениеми *.py
.!ls              - выполнить команду ls и вставить результат в редактор (Работает и с другими командами например pwd) 
!python %         - запустить файл python (% это текущий открытый файл)
:term             - запуск терминала в новом окне
gq+{motion}       - форматирование кода встроенным в vim методом, {motion} - команда
Ctrl+n или Ctrl+p - в INSERT MODE, выводит список вариантов автодополнения
Ctrl+z            - выйти в терминал (fg - вернуться в vim)
:%!xxd            - Просмотр двоичного кода (hex) (:%!xxd -r  для возврата в нормальный режим) (Может добавить 0А в конец файла? Нужно проверить)
f                 - открыть файл с именем, находящимся под курсором (под курсором должен быть путь) 
gx                - открыть ссылку, находящуюся под курсором в браузере по умолчанию
:shell (потом ввести в терминале) chmod u+w файл.txt (потом выйти из shell командой exit) exit (и в конце заставим vim записать файл :w!) :w!  -  Нужно для записи файла защищенного от записи если мы забыли запустить через sudo

                       РЕЖИМ ВСТАВКИ (INSERT)
Shift+a / Shift+i - Начать редактиовать с начала строки или с конца
Ctrl+r <symbol>   - вставить из регистра <symbol>
Ctrl+r =          - вставить вычисления введенные в приглашении(CTRL-R =1000 * 60 * 60 * 24)
Ctrl+h            - удаляет последний символ
Ctrl+w            - удалить слово перед курсором (Не записывая в регистр)
Ctrl+u            - удаляет все символы от начала строки до курсора
Ctrl+t            - вставить табуляцию в начало текущей строки
Ctrl+d            - удалить табуляцию из начала текущей строки
Ctrl+o <command>  - выполняет команду command и возвращается обратно в режим вставки

                       ИЗМЕНЕНИЕ ТЕКСТА
~                - изменить регистр букв на противоположный по мере прохождения курсора
gUU (guu)        - всю строку в верхний регистр (всю строку в нижний регистр)
Ctrl+a           - Увеличить число под курсором на единицу
Ctrl+x           - Уменьшить число под курсором на единицу

                       ПЕРЕМЕЩЕНИЕ, ПРОСМОТР, МЕТКИ 
`.               - последнее место редактирования
f+<symbol>       - передвинуться вперед (forward) к символу <symbol> в текущей строке (Например: 3fx - переместить курсор на третье вхождение символа x)
F+<symbol>       - назад (backward) к символу <symbol> в текущей строке
tx               - переместить курсор на символ перед символом x
%                - когда под курсором находится скобка, то нажатие на % переместит курсор на соответствующую парную скобку
(                - передвинуть курсор назад на предложение (до точки)
)                - передвинуть курсор вперед на одно предложение
}                - абзац вниз (до пустой строки)
{                - абзац вверх

Ctrl+6           - Предыдущий файл  
Ctrl+e           - прокрутка строк вниз 
Ctrl+y           - прокрутка строк вверх
Ctrl+f / Ctrl+d  - прокрутка страницы вниз
Ctrl+u           - прокрутка страницы вверх

ma               - создает метку в a
`a               - перемещает курсор на метку «a» (конкретное место)
‘a               - перемещает курсор на начало строки, содержащей метку «a»
Ctrl+o/Ctrl+i    - перемещение к ранее посещенным меткам назад и вперед
:marks           - показать все определенные метки.


                       ВЫДЕЛЕНИЕ, УДАЛЕНИЕ, КОПИРОВАНИЕ ТЕКСТА 
vip              - выделить параграф
vt#              - выделить всё до символа # где # любая буква или символ
V                - выделить строку
o/O              - перемещают курсор в разные концы выделенного блока для изменения размеров
gv               - выделяет текст, который был выделен прошлой командой выделения
!<command>       - отфильтровать выделенные строки с помощью внешней программы

di(              - удалить содержимое круглых скобок
dfx              - удалить все от текущей позици до символа "x"
d/<pattern>      - удаляет текст начиная с текущего положения курсора до первого встретившегося «pattern», не включая его
daw              - удаляет слово, даже когда курсор находится в середине этого слова
ciw              - удаляет слово под курсором и переходит в режим вставки

shift+" + y      - Скопировать в буфер обмена компьютера
"0p              - Вставить то что было скопировано в с помощью 'y', но перезаписалось при удалении

                       ПОИСК И ЗАМЕНА
*                - Нахождение таких-же слов, навести на слово и нажимать * или n
:s               - Поиск и замена (:предел от, предел доs/pattern/replacement text/options)
:s/foo/bar/g     - замена только на этой линии
:x,ys/foo/bar    - замена в диапазоне от x до y (x и y стоки)
:%s/foo/bar/gci  - заменить все foo на bar в файле (g - global весь файл, опция c - подтверждение изменения, i - без учета регистра)

                       ВКЛАДКИ
:tabedit <file>  - для открытия нескольких файлов в "tabs" как в браузере
:tabnew          - для открытия новой закладки
:tabm            - для изменения порядка закладок (:tabmove 0 - например)
gt/gT            - следующий и предыдущий таб (5gT - 5 табов назад)

                       ОКНА, NETRW и БУФЕРЫ
Ctrl+w c         - закрыть окно
Ctrl+w s         - разделить окно по горизонтали
Ctrl+w v         - тоже, только по вертикали
Ctrl+w | или =   - Скрыть или открыть все окна по вертикали
Ctrl+n           -  Переключить текущее окно на след окно в буфере
Ctrl+w h j k l   - Переключить курсор на окно влево - вверх - вниз - вправо
Ctrl+w f         - разделить и в новом окне открыть файл, путь к которому находится под курсором

:Ex / :Sex / :Vex - просмотр файловой системы через netrw. Сокращения от Explore
%                - создать файл
d                - создать папку
D                - удалить
R                - переименовать
s                - сортировка по:
f1               - help
-                - навигация на 1 папку назад

:edit hello.txt  - для окрытия файла (Можно просто :e)
:ls              - список буферов
:b имя_буфера    - переключиться на буфер, комбинируется с табом, 
:b domain, жмём таб и нам подставляется открытый iis_domain.cpp
:bd              - удалить текущий буфер (На самом деле просто делает буфер невидимым, но оставляет его в памяти.)
:bd имя_буфера   - удалить буфер по имени
:bw              - полностью стирает буфер из памяти
:bw Ctrl+A       - Можно закрыть все буферы (Ctrl-A раскрывается в список всех буферов)

                       СВЕРТКА
zf               - Свертка. Выделяем участок с помощью v и нажимаем zf
za               - открыть - закрыть участок текста
                                                               
                       РЕГИСТРЫ и МАКРОСЫ 
"x               - использовать регистр с именем для того чтобы выполнить следующую операцию ("x4yy - Копировать следующие 4 строки в регистр с именем 'x') Потом нажимаем "xp - вставить текст из регистра с именем 'x'
:registers       - Для просмотра содержимого всех регистров

qq               - включили запись в регистр q. Делаете, что вам надо --- поиск, замена, команды движения, вставка текста, переход между вкладками --- без ограничений. Даже из Вим можно выйти.
q                - конец записи
@q               - повтор серии действий
@@               - вызов последнего вызыванного макроса
qaq              - очистить регистр, где <a> это имя макроса 
:let @a = ''     - очистить регистр, где <a> это имя макроса 
:let @b=@a       - сохранить макрос b в макрос a

 Для рекурсивного вызова можно начать записывать макрос сделать действия, перед концом записи <q> вызываем этот макрос @a - где <a> имя макроса.
Таким образом макрос сделает работу до конца файла.
  Макросы сохраняются в буферы, мы можем писать макрос на прямую в текст, что бы поместить в файл текст существующего макроса нужно нажать "[a-z]p, потом можно сохранить его, в следующий раз открыть текст скопировать макрос в буфер "[a-z]y и запустить его. 

 
                       КОМБИНАЦИИ ДЛЯ ПЛАГИНОВ(МОИХ)
gp               - Get Prettier для плагина Pretier, форматирование кода
\a               - Включение/Выключение выявления ошибок, плагин A.L.E
]r и [r          - Перемещение к ошибкам, плагин A.L.E
Ctrl+y ,         - Плагин Emmet, автодополнение HTML и CSS
gcc или выд. блок и gc - Плагин tpope/vim-commentary закоментировать текущую строку
Ctrl+n           - Плагин vim-react-snippets. (По умолчанию Tab, изменить можно в файле Плагина)

Пробел + ;       - Плагин Telescope для поиска по буфферам
CTRL-X / CTRL-V  - Плагин Telescope открыть окно по горизонтали / вертикали
Пробел + pf      - Плагин Telescope для поиска по файлам
<S-F5>           - Плагин Telescope Греповский поиск слова под курсором (Shift + F5)
<S-F4>           - Плагин Telescope Греповский поиск слова в модальном окошке
Ctrl + p         - Плагин Telescope Нечеткий поиск в выводе команды git ls-files с учетом .gitignore
Пробел + gs      - Плагин vim-fugitive, манипуляции с Git

                 - Плагин lsp-zero
shift + k        - отображает информацию о символе, находящемся под курсором, в плавающем окне. См. :help vim.lsp.buf.hover().
gd               - переход к определению символа под курсором. См. :help vim.lsp.buf.definition().
gD               - переход к объявлению символа под курсором. Некоторые серверы не реализуют эту функцию. См. :help vim.lsp.buf.declaration().
gi               - список всех реализаций символа под курсором в окне быстрого исправления. См. :help vim.lsp.buf.implementation().
go               - Переход к определению типа символа под курсором. См. :help vim.lsp.buf.type_definition().
gr               - выводит список всех ссылок на символ под курсором в окне быстрого исправления. См. :help vim.lsp.buf.references().
gs               - отображает информацию о подписи символа под курсором в плавающем окне. См. :help vim.lsp.buf.signature_help(). Если для этого ключа уже существует сопоставление, эта функция не привязана.
<F2>             - переименовывает все ссылки на символ под курсором. См. :help vim.lsp.buf.rename().
gp               - форматировать код в текущем буфере. См. :help vim.lsp.buf.format().
<F4>             - выбирает действие кода, доступное в текущей позиции курсора. См. :help vim.lsp.buf.code_action().
gl               - Показать диагностику в плавающем окне. См. :help vim.diagnostic.open_float().
[d               - переход к предыдущей диагностике в текущем буфере. См. :help vim.diagnostic.goto_prev().
]d               - переход к следующей диагностике. См. :help vim.diagnostic.goto_next().

                       НЕ VIM
~/.bashrc        - переменная окружения
